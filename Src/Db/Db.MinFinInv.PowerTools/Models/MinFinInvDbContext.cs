// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Db.MinFinInv.PowerTools.Models;

public partial class MinFinInvDbContext : DbContext
{
    public MinFinInvDbContext()
    {
    }

    public MinFinInvDbContext(DbContextOptions<MinFinInvDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AcntHist> AcntHists { get; set; }

    public virtual DbSet<InvAccount> InvAccounts { get; set; }

    public virtual DbSet<VAcntHistByAcnt> VAcntHistByAcnts { get; set; }

    public virtual DbSet<VLatestAcntBalance> VLatestAcntBalances { get; set; }

    public virtual DbSet<VLatestAcntBalance2> VLatestAcntBalance2s { get; set; }

    public virtual DbSet<VLatestAcntBalance3> VLatestAcntBalance3s { get; set; }

    public virtual DbSet<VLatestGrandTotal> VLatestGrandTotals { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=.\\sqlexpress;Initial Catalog=MinFinInv;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AcntHist>(entity =>
        {
            entity.ToTable("AcntHist");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BalanceInUnits).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Date).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.InvAccountId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InvAccountID");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.RowAddedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.TotalInvested).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Txn).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.InvAccount).WithMany(p => p.AcntHists)
                .HasForeignKey(d => d.InvAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AcntHist_InvAccount");
        });

        modelBuilder.Entity<InvAccount>(entity =>
        {
            entity.ToTable("InvAccount");

            entity.HasIndex(e => e.AcntNumber, "IX_InvAccount").IsUnique();

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID");
            entity.Property(e => e.AcntHolder)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcntNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcntType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Advisor)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BalanceClosing).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BalanceOpening).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DfsClientId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DfsPlanNum)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Institution)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Note2023).HasColumnType("ntext");
            entity.Property(e => e.Notes)
                .HasMaxLength(888)
                .IsUnicode(false);
            entity.Property(e => e.OpenedOn).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.RowAddedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.SortableFlags)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrcAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalIn).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TrgAccount)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SrcAccountNavigation).WithMany(p => p.InverseSrcAccountNavigation)
                .HasForeignKey(d => d.SrcAccount)
                .HasConstraintName("FK_InvAccount_InvAccount");
        });

        modelBuilder.Entity<VAcntHistByAcnt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vAcntHist_byAcnt#");

            entity.Property(e => e.AcntNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BalanceInUnits).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.InvAccountId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InvAccountID");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.TotalInvested).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Txn).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 3)");
        });

        modelBuilder.Entity<VLatestAcntBalance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLatestAcntBalance");

            entity.Property(e => e.AcntHolder)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcntNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcntType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Advisor)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AuxIdNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Balance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BalanceClosing).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BalanceInUnits).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.BalanceOpening).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DfsClientId).IsUnicode(false);
            entity.Property(e => e.DfsPlanNum).IsUnicode(false);
            entity.Property(e => e.Id)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID");
            entity.Property(e => e.Institution)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.NotesHist).IsUnicode(false);
            entity.Property(e => e.SrcAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalIn).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalInvested).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Txn).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UnitValue).HasColumnType("decimal(18, 3)");
        });

        modelBuilder.Entity<VLatestAcntBalance2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLatestAcntBalance2");

            entity.Property(e => e.AcntHolder)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcntNumber)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AcntType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DfsClientId).IsUnicode(false);
            entity.Property(e => e.DfsPlanNum).IsUnicode(false);
            entity.Property(e => e.Id)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ID");
            entity.Property(e => e.Institution)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LastBlnc).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.TtlTxn).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.TtlTxnMissing).HasColumnType("decimal(38, 2)");
        });

        modelBuilder.Entity<VLatestAcntBalance3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLatestAcntBalance3");

            entity.Property(e => e.InvAccountId)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("InvAccountID");
            entity.Property(e => e.LastTtlBalance).HasColumnType("decimal(38, 2)");
            entity.Property(e => e.MaxBalance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinBalance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Notes).IsUnicode(false);
            entity.Property(e => e.Src)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Trg)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VLatestGrandTotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vLatestGrandTotal");

            entity.Property(e => e.TotalBalance).HasColumnType("decimal(38, 2)");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}